#!/usr/bin/env python3
"""Test template search in different realms."""

import os

# Set required environment variables
os.environ.setdefault("KEYCLOAK_BASE_URL", "https://app.ontonet.ru")
os.environ.setdefault("KEYCLOAK_REALM", "onto")
os.environ.setdefault("KEYCLOAK_CLIENT_ID", "frontend-prod")
os.environ.setdefault("ONTO_API_BASE", "https://app.ontonet.ru/api/v2/core")

from onto_mcp import resources

def test_search():
    """Test template search in available realms."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–ª–º–∞—Ö")
    print("=" * 60)
    
    try:
        # Get available realms
        print("üìÅ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª–º–æ–≤...")
        realms_result = resources.list_available_realms()
        print(realms_result)
        print()
        
        # Test search terms
        search_terms = ["–º–æ–¥–µ–ª—å", "a", "test", "entity", "–∫–ª–∞—Å—Å"]
        
        # Realm IDs to test
        realm_ids = [
            ("av2@ontonet.ru personal realm", "0d37cb49-5c99-41b1-9351-eb1e61cc07f5"),
            ("zxcxzcxzc", "9c288f96-3e98-44fb-a4a3-50ab0ed28c58"),
            ("–ü—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π", "25a4aee7-1619-48a7-9c8a-93dffaa19e4b")
        ]
        
        for term in search_terms:
            print(f"üîç –ü–æ–∏—Å–∫ '{term}':")
            
            # Search in examples realm first (most likely to have templates)
            for realm_name, realm_id in [realm_ids[2]]:  # Just examples realm
                print(f"   –í —Ä–µ–∞–ª–º–µ: {realm_name}")
                try:
                    result = resources.search_templates(term, realm_id=realm_id)
                    if "Found" in result and "template(s)" in result:
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã!")
                        print(result)
                        return  # Stop on first success
                    else:
                        print(f"   ‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            print()
        
        print("üìù –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–∞–ª–º–∞ (–∞–≤—Ç–æ–≤—ã–±–æ—Ä):")
        try:
            result = resources.search_templates("a")
            print(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_search() 
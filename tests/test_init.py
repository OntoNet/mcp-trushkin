#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP API
"""
import os
import time

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_vars = {
    "KEYCLOAK_BASE_URL": "https://app.ontonet.ru",
    "KEYCLOAK_REALM": "onto",
    "KEYCLOAK_CLIENT_ID": "frontend-prod", 
    "KEYCLOAK_CLIENT_SECRET": "",
    "ONTO_API_BASE": "https://app.ontonet.ru/api/v2/core",
    "MCP_TRANSPORT": "stdio"
}

for key, value in env_vars.items():
    os.environ[key] = value

print("=== –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP API ===\n")

print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é _get_user_spaces_data...")
try:
    from onto_mcp.resources import _get_user_spaces_data
    
    start_time = time.time()
    spaces = _get_user_spaces_data()
    elapsed = time.time() - start_time
    
    print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {elapsed:.2f}s")
    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(spaces)} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
    if spaces and not spaces[0].get('error'):
        print(f"   üìÇ –ü–µ—Ä–≤–æ–µ: {spaces[0].get('name', 'N/A')}")
    elif spaces and spaces[0].get('error'):
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {spaces[0]['error']}")
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç list_available_realms —á–µ—Ä–µ–∑ .fn...")
try:
    from onto_mcp.resources import mcp
    
    # –ü–æ–ª—É—á–∞–µ–º tool —á–µ—Ä–µ–∑ async API
    import asyncio
    
    async def test_tool():
        list_realms_tool = await mcp.get_tool("list_available_realms")
        
        start_time = time.time()
        result = list_realms_tool.fn()  # –í—ã–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ .fn
        elapsed = time.time() - start_time
        
        print(f"   ‚úÖ Tool –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {elapsed:.2f}s")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {result[:200]}...")
        
        return result
    
    result = asyncio.run(test_tool())
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
try:
    from onto_mcp.resources import _get_user_spaces_data
    times = []
    
    for i in range(3):
        start_time = time.time()
        _get_user_spaces_data()
        elapsed = time.time() - start_time
        times.append(elapsed)
        print(f"   –í—ã–∑–æ–≤ {i+1}: {elapsed:.2f}s")
    
    avg_time = sum(times) / len(times)
    print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}s")
    
    if avg_time < 2.0:
        print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ!")
    else:
        print("   ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–≤–∞—Ç–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º search_templates (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥)...")
try:
    from onto_mcp.resources import mcp
    import asyncio
    
    async def test_search():
        search_tool = await mcp.get_tool("search_templates")
        
        start_time = time.time()
        result = search_tool.fn("test")  # –ò—â–µ–º —á—Ç–æ-—Ç–æ —Å –∏–º–µ–Ω–µ–º "test"
        elapsed = time.time() - start_time
        
        print(f"   ‚úÖ Search –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {elapsed:.2f}s")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    asyncio.run(test_search())
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

print(f"\n=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã ===")
print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Claude Desktop!")